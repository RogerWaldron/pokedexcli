package pokeapi

import (
	"encoding/json"
	"io"
	"net/http"
)

func (c *Client) LocationList(pageURL *string) (LocationAreas, error) {
	url := baseURL + "/location-area"
	if pageURL != nil {
		url = *pageURL
	}

	cachedData, ok := c.cache.Get(url)
	if ok {
		locationResp := LocationAreas{}
		err := json.Unmarshal(cachedData, &locationResp)
		if err != nil {
			return LocationAreas{}, err
		}
	
		return locationResp, nil
	}

	req, err := http.NewRequest(http.MethodGet, url, nil)
	if err != nil {
		return LocationAreas{}, err
	}

	resp, err := c.HttpClient.Do(req)
	if err != nil {
		return LocationAreas{}, err
	}
	defer resp.Body.Close()

	data, err := io.ReadAll(resp.Body)
	if err != nil {
		return LocationAreas{}, err
	}

	locationResp := LocationAreas{}
	err = json.Unmarshal(data, &locationResp)
	if err != nil {
		return LocationAreas{}, err
	}

	c.cache.Add(url, data)

	return locationResp, nil
}

// you'll need to pass the name of the location area being explored. 
// By adding a name or id, the API will return a lot more information about the location area.
// https://pokeapi.co/api/v2/location-area/{id or name}/
/*
type AutoGenerated struct {
	ID                   int    `json:"id"`
	Name                 string `json:"name"`
	PokemonEncounters []struct {
		Pokemon struct {
			Name string `json:"name"`
			URL  string `json:"url"`
		} `json:"pokemon"`
	} `json:"pokemon_encounters"`
}
*/

func (c *Client) PokemonInAreaList(ID string) (PokemonInArea, error) {
	url := baseURL + "/location-area/" + ID
	cachedData, ok := c.cache.Get(url)
	if ok {
		pokemonResp := PokemonInArea{}
		err := json.Unmarshal(cachedData, &pokemonResp)
		if err != nil {
			return PokemonInArea{}, err
		}
	
		return pokemonResp, nil
	}

	req, err := http.NewRequest(http.MethodGet, url, nil)
	if err != nil {
		return PokemonInArea{}, err
	}

	resp, err := c.HttpClient.Do(req)
	if err != nil {
		return PokemonInArea{}, err
	}
	defer resp.Body.Close()

	
	data, err := io.ReadAll(resp.Body)
	if err != nil {
		return PokemonInArea{}, err
	}

	if len(data) == 0 {
		return PokemonInArea{}, nil
	}
	
	pokemonResp := PokemonInArea{}
	err = json.Unmarshal(data, &pokemonResp)
	if err != nil {
		return PokemonInArea{}, err
	}
	
	c.cache.Add(url, data)

	return pokemonResp, nil
}